/*
 *  SLAMTEC LIDAR
 *  Simple Data Grabber Demo App
 *
 *  This is a command-line demo for connecting to a Slamtec LIDAR,
 *  starting a scan, and printing the 360-degree distance data in
 *  textual form and as a histogram. It supports both serial and UDP modes.
 */

 #include <chrono>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 
 #include "sl_lidar.h" 
 #include "sl_lidar_driver.h"
 #include <fstream>
 
 #ifndef _countof
 #define _countof(_Array) (int)(sizeof(_Array) / sizeof(_Array[0]))
 #endif
 
 #ifdef _WIN32
 #include <Windows.h>
 #define delay(x)   ::Sleep(x)
 #else
 #include <unistd.h>
 static inline void delay(sl_word_size_t ms){
     while (ms>=1000){
         usleep(1000*1000);
         ms-=1000;
     };
     if (ms!=0)
         usleep(ms*1000);
 }
 #endif
 
 using namespace sl;
 
 // Prints usage info when run incorrectly
 void print_usage(int argc, const char * argv[])
 {
     printf("Simple LIDAR data grabber for SLAMTEC LIDAR.\n"
            "Version:  %s \n"
            "Usage:\n"
            " For serial channel %s --channel --serial <com port> [baudrate]\n"
            " For udp channel %s --channel --udp <ipaddr> [port NO.]\n"
            , SL_LIDAR_SDK_VERSION,  argv[0], argv[0]);
 }
 
 // Plots a histogram from scan data (angle buckets -> average distances)
 void plot_histogram(sl_lidar_response_measurement_node_hq_t * nodes, size_t count)
 {
     const int BARCOUNT =  75;
     const int MAXBARHEIGHT = 20;
 
     float histogram[BARCOUNT] = {0};
     float max_val = 0;
 
     for (int pos =0 ; pos < (int)count; ++pos) {
         int int_deg = (int)(nodes[pos].angle_z_q14 * 90.f / 16384.f);
         if (int_deg >= BARCOUNT) int_deg = 0;
         float cached = histogram[int_deg];
         float dist = nodes[pos].dist_mm_q2 / 4.0f;
         histogram[int_deg] = cached == 0.0f ? dist : (dist + cached)/2.0f;
         if (histogram[int_deg] > max_val) max_val = histogram[int_deg];
     }
 
     // Print histogram bars
     for (int height = 0; height < MAXBARHEIGHT; ++height) {
         float threshold_h = (MAXBARHEIGHT - height - 1) * (max_val / MAXBARHEIGHT);
         for (int xpos = 0; xpos < BARCOUNT; ++xpos) {
             putc(histogram[xpos] >= threshold_h ? '*' : ' ', stdout);
         }
         printf("\n");
     }
     for (int xpos = 0; xpos < BARCOUNT; ++xpos) putc('-', stdout);
     printf("\n");
 }
 
 // Captures a single 360-degree scan and prints results
 sl_result capture_and_display(ILidarDriver * drv)
 {
     sl_result ans;
     sl_lidar_response_measurement_node_hq_t nodes[8192];
     size_t count = _countof(nodes);
 
     printf("waiting for data...\n");
 
     ans = drv->grabScanDataHq(nodes, count, 0);
     if (SL_IS_OK(ans) || ans == SL_RESULT_OPERATION_TIMEOUT) {
         drv->ascendScanData(nodes, count);
         plot_histogram(nodes, count);
 
         // Open a file for writing
         std::ofstream outFile("lidar_scan_data.txt", std::ios::app); // appends data
 
         if (!outFile) {
             fprintf(stderr, "Error opening output file!\n");
             return SL_RESULT_OPERATION_FAIL;
         }
 
         for (int pos = 0; pos < (int)count; ++pos) {
              float angle = (nodes[pos].angle_z_q14 * 90.f) / 16384.f;
              float distance = nodes[pos].dist_mm_q2 / 4.0f;
          
              // Get current timestamp in milliseconds since epoch
              auto now = std::chrono::system_clock::now();
              auto ms = std::chrono::duration_cast<std::chrono::milliseconds>(now.time_since_epoch()).count();
          
              outFile << ms << " " << angle << " " << distance << "\n";
          }
 
         outFile.close();
     } else {
         printf("error code: %x\n", ans);
     }
 
     return ans;
 }
 
 // Entry point
 int main(int argc, const char * argv[]) {
     const char *opt_channel = NULL;
     const char *opt_channel_param_first = NULL;
     sl_u32      opt_channel_param_second = 0;
     sl_result   op_result;
     int         opt_channel_type = CHANNEL_TYPE_SERIALPORT;
 
     IChannel* _channel;
 
     if (argc < 5) {
         print_usage(argc, argv);
         return -1;
     }
 
     // Parse channel and parameters from command-line arguments
     const char * opt_is_channel = argv[1];
     if(strcmp(opt_is_channel, "--channel") == 0) {
         opt_channel = argv[2];
         if(strcmp(opt_channel, "-s") == 0 || strcmp(opt_channel, "--serial") == 0) {
             opt_channel_param_first = argv[3];
             if (argc > 4) opt_channel_param_second = strtoul(argv[4], NULL, 10);
         } else if(strcmp(opt_channel, "-u") == 0 || strcmp(opt_channel, "--udp") == 0) {
             opt_channel_param_first = argv[3];
             if (argc > 4) opt_channel_param_second = strtoul(argv[4], NULL, 10);
             opt_channel_type = CHANNEL_TYPE_UDP;
         } else {
             print_usage(argc, argv);
             return -1;
         }
     } else {
         print_usage(argc, argv);
         return -1;
     }
 
     // Create the driver instance
     ILidarDriver * drv = *createLidarDriver();
     if (!drv) {
         fprintf(stderr, "insufficient memory, exit\n");
         exit(-2);
     }
 
     sl_lidar_response_device_health_t healthinfo;
     sl_lidar_response_device_info_t devinfo;
 
     do {
         // Connect to the lidar
         if (opt_channel_type == CHANNEL_TYPE_SERIALPORT)
             _channel = (*createSerialPortChannel(opt_channel_param_first, opt_channel_param_second));
         else if (opt_channel_type == CHANNEL_TYPE_UDP)
             _channel = *createUdpChannel(opt_channel_param_first, opt_channel_param_second);
 
         if (SL_IS_FAIL((drv)->connect(_channel))) {
             fprintf(stderr, "Error, cannot bind to the specified port or IP.\n");
             break;
         }
 
         // Get device info
         op_result = drv->getDeviceInfo(devinfo);
         if (SL_IS_FAIL(op_result)) {
             fprintf(stderr, "Error retrieving device info.\n");
             break;
         }
 
         printf("SLAMTEC LIDAR S/N: ");
         for (int pos = 0; pos < 16 ;++pos) {
             printf("%02X", devinfo.serialnum[pos]);
         }
         printf("\nFirmware Ver: %d.%02d\nHardware Rev: %d\n",
             devinfo.firmware_version>>8, devinfo.firmware_version & 0xFF,
             (int)devinfo.hardware_version);
 
         // Check health
         op_result = drv->getHealth(healthinfo);
         if (SL_IS_OK(op_result)) {
             printf("Lidar health status : ");
             switch (healthinfo.status) {
                 case SL_LIDAR_STATUS_OK: printf("OK."); break;
                 case SL_LIDAR_STATUS_WARNING: printf("Warning."); break;
                 case SL_LIDAR_STATUS_ERROR: printf("Error."); break;
             }
             printf(" (errorcode: %d)\n", healthinfo.error_code);
         } else {
             fprintf(stderr, "Error retrieving health info.\n");
             break;
         }
 
         if (healthinfo.status == SL_LIDAR_STATUS_ERROR) {
             fprintf(stderr, "Critical LIDAR error. Try rebooting the device.\n");
             break;
         }
 
         // Start the motor (auto speed)
         if (opt_channel_type == CHANNEL_TYPE_SERIALPORT)
             drv->setMotorSpeed(1200);
 
         // Start scanning in typical mode
         if (SL_IS_FAIL(drv->startScan(0, 1))) {
             fprintf(stderr, "Error, cannot start the scan operation.\n");
             break;
         }
 
         delay(3000); // give LIDAR some time to initialize
 
         // NEW: Take multiple scans
         const int NUM_SCANS = 100000;
         for (int i = 0; i < NUM_SCANS; ++i) {
             printf("\n--- Scan #%d ---\n", i + 1);
             if (SL_IS_FAIL(capture_and_display(drv))) {
                 fprintf(stderr, "Error, cannot grab scan data.\n");
                 break;
             }
             delay(1000); // optional: small delay between scans
         }
 
     } while(0);
 
     // Stop scanning and motor
     drv->stop();
     if (opt_channel_type == CHANNEL_TYPE_SERIALPORT) {
         delay(20);
         drv->setMotorSpeed(0);
     }
 
     if (drv) {
         delete drv;
         drv = NULL;
     }
 
     return 0;
 }